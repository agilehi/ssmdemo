<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.suftz.ssmdemo.mapper.UserMapper">

    <!--/***************查询start**********************************/-->


    <!--
        这里有个问题：拼接where条件时，并不知道哪个会作为第一个条件出现，因为第一个条件前面不需要and，而之后条件都需要and连接
        解决：
        1. 给where 后面加上1=1，以后的条件连接就都需要前面加上and了
        2. 使用mybatis提供的where标签
    -->
    <select id="getUser" resultType="com.suftz.ssmdemo.bean.User" databaseId="mysql">
        select * from user where 1=1
        <if test="uid!=null">
            and uid=#{uid}
        </if>
        <if test="name!=null">
            and name like #{name}
        </if>
        <if test="password!=null">
            and paassword like #{password}
        </if>
        <if test="age!=null">
           and age=#{age}
        </if>
        <if test="email!=null">
            and email like #{email}
        </if>
        <if test="address!=null">
            and address like #{address}
        </if>
        <if test="dept!=null&amp;&amp;dept.id!=null">
            and dept_id=#{dept.id}
        </if>
    </select>

    <!--where标签会将多出来的and去掉，注意，能去掉是因为写在了条件的前面，如果把所有的and都写在条件之后，则还是会出问题-->
    <select id="getUser2" resultType="com.suftz.ssmdemo.bean.User" databaseId="mysql">
        select * from user
        <where>
        <if test="uid!=null">
            uid=#{uid}
        </if>
        <if test="name!=null">
            and name like #{name}
        </if>
        <if test="password!=null">
            and paassword like #{password}
        </if>
        <if test="age!=null">
            and age=#{age}
        </if>
        <if test="email!=null">
            and email like #{email}
        </if>
        <if test="address!=null">
            and address like #{address}
        </if>
        <if test="dept!=null&amp;&amp;dept.id!=null">
            and dept_id=#{dept.id}
        </if>
        </where>
    </select>

    <select id="getUser3" resultType="com.suftz.ssmdemo.bean.User" databaseId="mysql">
        select * from user
        <!--
                     prefix:前缀，给trim标签体中整个字符串拼接后的结果加一个前缀字符串
            prefixOverrides:前缀覆盖，去掉整个字符串前面多余的字符串
                     suffix:后缀，给trim标签体中整个字符串拼接后的结果加一个后缀字符串
            suffixOverrides:后缀覆盖，去掉整个字符串后面多余的字符串
        -->
        <trim prefix="where" suffixOverrides="and">
            <if test="uid!=null">
                uid=#{uid} and
            </if>
            <if test="name!=null">
                name like #{name} and
            </if>
            <if test="password!=null">
                paassword like #{password} and
            </if>
            <if test="age!=null">
                age=#{age} and
            </if>
            <if test="email!=null">
                email like #{email} and
            </if>
            <if test="address!=null">
                address like #{address} and
            </if>
            <if test="dept!=null&amp;&amp;dept.id!=null">
                dept_id=#{dept.id} and
            </if>
        </trim>
    </select>

    <!--
        choose(when,otherwise):分支选择 ，类似java的switch-case
        上面的是把多个条件进行连接and，而现在是只选择其中一个
    -->
    <select id="getUser4" resultType="com.suftz.ssmdemo.bean.User" databaseId="mysql">
        select * from user
        <where>
            <choose>
                <when test="uid!=null">
                    uid=#{uid}
                </when>
                <when test="name!=null">
                    name like #{name}
                </when>
                <when test="password!=null">
                    paassword like #{password}
                </when>
                <when test="age!=null">
                    age = #{age}
                </when>
                <when test="email!=null">
                    email like #{email}
                </when>
                <when test="address!=null">
                    address like #{address}
                </when>
                <when test="dept!=null&amp;&amp;dept.id!=null">
                    dept_id=#{dept.id}
                </when>
            </choose>
        </where>
    </select>

    <!--
            foreach：遍历集合所有的元素
               item：将当前遍历出的元素赋值给指定的变量
          separator：每个元素之间的分隔符
               open：遍历出所有结果拼接一个开始的字符
              close：遍历出所有结果拼接一个结束的字符
              index：索引。遍历list的时候index是索引，item是当前索引值
                          遍历map的时候index表示map的key，item表示map的value

        uids 是需要接口方法的入参上使用@Param("uids")标识的，因为参数会被封装到map中，不标识就只能通过param1来取值
    -->
    <select id="getUser5" resultType="com.suftz.ssmdemo.bean.User" databaseId="mysql">
        select * from user where uid in
        <foreach collection="uids" item="item_id" separator="," open="(" close=")">
            #{item_id}
        </foreach>
    </select>

    <!--/***************查询end**********************************/-->

    <!--批量保存，发一条sql语句-->
<!--    <insert id="addUsers" databaseId="mysql">-->
<!--        insert into user(uid,name,password,age,email,address,dept_id) values-->
<!--        <foreach collection="users" item="user" separator=",">-->
<!--            (#{user.uid},#{user.name},#{user.password},#{user.age},#{user.email},#{user.address},#{user.dept.id})-->
<!--        </foreach>-->
<!--    </insert>-->
    <!--批量保存，发多个插入sql语句 ，但是连接数据库时需要url设置allowMultiQueries=true-->
    <insert id="addUsers" databaseId="mysql">
        <foreach collection="users" item="user" separator=";">
        insert into user(uid,name,password,age,email,address,dept_id) values(#{user.uid},#{user.name},#{user.password},#{user.age},#{user.email},#{user.address},#{user.dept.id})
        </foreach>
    </insert>

    <!--
        oracle不支持上面的写法，特别是第一种写法，values(),(),()，是不支持的
        1. 但是可以写多个插入的sql语句，而且需要使用begin...end; 来将多条sql语句括起来
           begin
           insert into user(uid,name,password,age,email,address,dept_id) values(....);
           insert into user(uid,name,password,age,email,address,dept_id) values(....);
           insert into user(uid,name,password,age,email,address,dept_id) values(....);
           end;

        2. 利用中间表
           insert into user(uid,name,password,age,email,address,dept_id)
           select user_seq.nextval,name,password,age,email,address,dept_id from(
                select 'tom' name,'123qwe' password,20 age,'tom@suftz.com' email,'earth' address,900 dept_id from dual
                union
                select 'jack' name,'123qwe' password,20 age,'tom@suftz.com' email,'earth' address,900 dept_id from dual
                union
                ...
           );
           注：dual是一个虚拟表，用来构成select的语法规则，oracle保证dual里面永远只有一条记录
    -->




    <!--
        set标签会帮助去掉,逗号
    -->
    <update id="updateUserDynamic" databaseId="mysql">
        update user
        <set>
        <if test="name!=null">
            name = #{name},
        </if>
        <if test="password!=null">
            paassword = #{password},
        </if>
        <if test="age!=null">
            age = #{age},
        </if>
        <if test="email!=null">
            email = #{email},
        </if>
        <if test="address!=null">
            address = #{address},
        </if>
        <if test="dept!=null&amp;&amp;dept.id!=null">
            dept_id=#{dept.id}
        </if>
        </set>
        <!--这样写其实有问题，如果不传uid，则会更新所有的数据，应该直接写成非动态的片段,强制传递一个uid，不传则报错，不执行-->
<!--        <where>-->
<!--            <if test="uid!=null">-->
<!--                uid=#{uid}-->
<!--            </if>-->
<!--        </where>-->
        where uid=#{uid}
    </update>

    <update id="updateUserDynamic2" databaseId="mysql">
        update user
        <trim prefix="set" suffixOverrides="," suffix="where">
            <if test="name!=null">
                name = #{name},
            </if>
            <if test="password!=null">
                paassword = #{password},
            </if>
            <if test="age!=null">
                age = #{age},
            </if>
            <if test="email!=null">
                email = #{email},
            </if>
            <if test="address!=null">
                address = #{address},
            </if>
            <if test="dept!=null&amp;&amp;dept.id!=null">
                dept_id=#{dept.id}
            </if>
        </trim>
        uid=#{uid}
    </update>

    <!--
        两个内置参数
        不只是方法传递过来的参数可以被用来判断，取值
        mybatis默认还有两个内置参数：
        1. _parameter:代表整个参数
             单个参数：_parameter就是这个参数
             多个参数：参数会封装为一个map，_parameter就是代表这个map
           作用：可以获取到后，做一些判断
        2. _databaseId:如果配置了databaseIdProvider标签，它就代表当前连接上的数据库的别名
           作用：可以在写sql的时候，根据不同的数据库，做一些修改，这样就不用根据不同的数据库写很多sql
    -->


    <!--
        bind：可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值
        因为#{变量名}使用之后，再不支持去拼接其他子串，但是${变量名}会有sql注入的安全问题
        所以bind支持让变量取出之后，拼接，然后再到sql语句中使用

        注：一般不这样做，太麻烦了，如果真的有这种%,_之类的需求，应该在传参的时候就传过来，而不是由sql模板来拼接
    -->
    <select id="getUserLikeInfo" resultType="com.suftz.ssmdemo.bean.User" databaseId="mysql">
        select
        <include refid="selectColumn">
            <property name="ex_column" value="salary" />
        </include> from user
        <bind name="_name" value="'_'+name+'%'" />
        <trim prefix="where" suffixOverrides="and">
            <if test="uid!=null">
                uid=#{uid} and
            </if>
            <if test="name!=null">
                name like #{_name} and
            </if>
            <if test="password!=null">
                paassword like #{password} and
            </if>
            <if test="age!=null">
                age=#{age} and
            </if>
            <if test="email!=null">
                email like #{email} and
            </if>
            <if test="address!=null">
                address like #{address} and
            </if>
            <if test="dept!=null&amp;&amp;dept.id!=null">
                dept_id=#{dept.id} and
            </if>
        </trim>
    </select>

    <!--
        sql：抽取可重用的sql片段。方便其他sql语句标签里面直接应用
        这里面不支持使用#{}来取值
    -->
    <sql id="selectColumn">
        <!--<if test="${ex_column}" />这里面也能写if等标签，使用内置的两个变量，如果在include处使用的时候定义了属性和值，这里面也能使用-->
        uid,name,password,age,email,address,dept_id
    </sql>
</mapper>

